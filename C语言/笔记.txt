知识点一：全局变量在整个工程中都可用
在同一个源文件中创建不同的.c文件，想要在一个.c文件中使用另一个.c文件中的变量时，只需要在这个.c文件中声明一下这个变量且加上extern，
举例：extern int age;

知识点二：在vs中，写入代码scanf可能会出现警告，这时只需要在代码的第一行写入#define _CRT_SECURE_NO_WARNINGS 1。

知识点三：const  int  num=4  表示num为常变量
const int mx= 10;
int main()
{
    int arr[mx] = { 0 };
   printf("mx=%d\n",mx);
return 0;
}
这样写就会出错。

知识点四：#define定义的标识符常量
格式：#define mx 10
举例：
 #include<stdio.h>
#define mx 10
int main()
{
    int arr[mx] = { 0 };
   printf("mx=%d\n",mx);
return 0;
}
这样写是合法的

知识点五、枚举常量---列举常量
关键字:enum
格式：enum 枚举名
      {
           常量1，
常量2，
等等
}；
双引号引起的东西就叫字符串

知识点六：
两种存放字符串的方式
int main()
{
    char arr1[4] = "abc";
    //arr1中放入了a,b,c,以及转义字符'\0'
    char arr2[] = { 'a','b','c' };
    char arr3[] = { 'a','b','c',0 };
    //转义字符'\0'为0
    //所以'\0'是字符串的结束标志
   printf("%s\n",arr1);
   printf("%s\n",arr2);
   printf("%s\n", arr3);
return 0;

字符串的结束标志是‘\0’，但是不算字符串的长度。

知识点七：
函数的格式：
返回类型  函数名（参数类型 参数名，参数类型  参数名……）
{
函数体
}

知识点八：
static 用来说明静态变量。

1、如果是在函数外面定义的，那么其效果和全局变量类似，即static说明的变量可以在当前c程序文件中使用。

2、如果是在函数内部定义的，那么这个变量只初始化一次，即使再次调用这个函数，这个static变量也不会再次被初始化，于是，这个变量的取值就会一直保存着，我们再次调用该函数时，仍是保存的上一次函数调用时保存的结果。

static的作用：
1、隐藏性。当我们同时编译多个文件时，所有未加static前缀的全局变量和函数都具有全局可见性。

2、static可以保持变量内容的持久，当static定义变量在函数内部时，改变量值的生命周期和全局变量相同。

3、static可以令其定义变量内存区所有字节默认初始化为0。









